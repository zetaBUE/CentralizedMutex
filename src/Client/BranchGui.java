/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Client;

import java.io.*;
import java.net.*;

/**
 *
 * @author zeta440
 */
public class BranchGui extends javax.swing.JFrame {

    /**
     * Creates new form ClientGui
     */
    public BranchGui() {
        initComponents();
    }

    private int assignedServerPort = -1;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        productTypeBox = new javax.swing.JComboBox<>();
        productTextField = new javax.swing.JTextField();
        qtyTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        connectButton = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane2.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Choose Product Type:");

        productTypeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Shirts", "Pants" }));
        productTypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productTypeBoxActionPerformed(evt);
            }
        });

        productTextField.setText("ProductName");
        productTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productTextFieldActionPerformed(evt);
            }
        });

        qtyTextField.setText("Quantity");

        addButton.setText("addButton");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("deleteButton");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        viewButton.setText("viewButton");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        connectButton.setText("connectButton");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(84, 84, 84)
                                                .addComponent(addButton)
                                                .addGap(59, 59, 59)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(connectButton)
                                                        .addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(qtyTextField,
                                                                        javax.swing.GroupLayout.Alignment.TRAILING,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(deleteButton,
                                                                        javax.swing.GroupLayout.Alignment.TRAILING))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(60, 60, 60)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel1)
                                                        .addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addGap(6, 6, 6)
                                                                        .addComponent(viewButton))
                                                                .addComponent(productTextField,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(productTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 25, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(14, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(productTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(productTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(qtyTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(viewButton)
                                        .addComponent(connectButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12,
                                        Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(deleteButton)
                                        .addComponent(addButton))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(20, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productTextFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_productTextFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_productTextFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        sendRequest("ADD");
    }// GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        sendRequest("DELETE");
    }// GEN-LAST:event_deleteButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        sendRequest("VIEW");
    }// GEN-LAST:event_viewButtonActionPerformed

    private void productTypeBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_productTypeBoxActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_productTypeBoxActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        requestAccess();
    }// GEN-LAST:event_connectButtonActionPerformed

    private void requestAccess() {
        try {
            Socket socket = new Socket("localhost", 5000);
            BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            DataOutputStream output = new DataOutputStream(socket.getOutputStream());

            logMessage("Branch: Requesting access from Coordinator...");

            // Send CONNECT request
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
            writer.println("CONNECT");

            String response = input.readLine();
            logMessage("Coordinator: " + response);

            if (response.equals("Granted")) {
                assignedServerPort = productTypeBox.getSelectedItem().equals("Shirts") ? 6000 : 6001;
                output.writeInt(assignedServerPort);
                output.flush(); // Ensure the port number is sent

                // Wait for coordinator's confirmation
                String confirmMsg = input.readLine();
                logMessage("Coordinator: " + confirmMsg);

                // Send RELEASE message
                writer.println("RELEASE");

                // Get final confirmation
                String releaseConfirm = input.readLine();
                logMessage("Coordinator: " + releaseConfirm);

                logMessage("Branch: Successfully connected to Server " + assignedServerPort);
            } else {
                logMessage("Branch: An Error Occurred.");
            }
            socket.close();
        } catch (IOException e) {
            logMessage("Branch: Error connecting to Coordinator.");
        }
    }

    private void sendRequest(String action) {
        if (assignedServerPort == -1) {
            logMessage("Error: Request access first!");
            return;
        }
        String productName = productTextField.getText().trim();
        String quantityText = qtyTextField.getText().trim();

        if (productName.isEmpty() || (action.equals("ADD") && quantityText.isEmpty())) {
            logMessage("Error: Enter a valid product name and quantity.");
            return;
        } else if (action.equals("DELETE") && productName.isEmpty()) {
            logMessage("Error: Enter a product name to delete.");
            return;
        }

        String command = null;
        switch (action) {
            case "ADD":
                try {
                    int qty = Integer.parseInt(quantityText);
                    if (qty <= 0) {
                        logMessage("Error: Quantity must be positive.");
                        return;
                    }
                    command = "ADD " + productName + " " + qty;
                } catch (NumberFormatException e) {
                    logMessage("Error: Invalid quantity format.");
                    return;
                }
                break;
            case "DELETE":
                command = "DELETE " + productName;
                break;
            case "VIEW":
                command = "VIEW";
                break;
            default:
                logMessage("Invalid action");
                return;
        }

        Socket coordinatorSocket = null;
        Socket serverSocket = null;

        try {
            // First, request mutex access from Coordinator
            coordinatorSocket = new Socket("localhost", 5000);
            BufferedReader coordinatorInput = new BufferedReader(
                    new InputStreamReader(coordinatorSocket.getInputStream()));
            PrintWriter coordinatorOutput = new PrintWriter(coordinatorSocket.getOutputStream(), true);

            logMessage("Requesting mutex access for operation...");
            coordinatorOutput.println("REQUEST");
            String response = coordinatorInput.readLine();
            logMessage("Coordinator: " + response);

            if (!"Granted".equals(response)) {
                logMessage("Mutex access denied. Please try again later.");
                return;
            }

            // Now that we have mutex access, perform the operation
            serverSocket = new Socket("localhost", assignedServerPort);
            BufferedReader serverInput = new BufferedReader(new InputStreamReader(serverSocket.getInputStream()));
            PrintWriter serverOutput = new PrintWriter(serverSocket.getOutputStream(), true);

            // Read welcome message
            serverInput.readLine();

            // Send command
            serverOutput.println(command);
            String serverResponse = serverInput.readLine();
            logMessage("Server: " + serverResponse);

            // Release the mutex
            coordinatorOutput.println("RELEASE");
            String releaseConfirm = coordinatorInput.readLine();
            logMessage("Coordinator: " + releaseConfirm);

        } catch (IOException e) {
            logMessage("Error communicating with servers: " + e.getMessage());
        } finally {
            // Close all connections
            try {
                if (serverSocket != null)
                    serverSocket.close();
                if (coordinatorSocket != null)
                    coordinatorSocket.close();
            } catch (IOException e) {
                logMessage("Error closing connections: " + e.getMessage());
            }
        }
    }

    public void logMessage(String message) {
        logTextArea.append(message + "\n");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BranchGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BranchGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BranchGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BranchGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BranchGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTextField productTextField;
    private javax.swing.JComboBox<String> productTypeBox;
    private javax.swing.JTextField qtyTextField;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
